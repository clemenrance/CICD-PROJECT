pipeline{

     agent any

     stages{

          stage('git checkout'){

               steps{
                   git branch: 'main', url: 'https://github.com/clemenrance/CICD-PROJECT.git'
               }
            }   
          stage('unit testig'){

               steps{
                   sh 'mvn test'
               }     
          }
          stage('integration testing'){

               steps{
                   sh 'mvn verify -DskiUnitTests'
               }     
          }
          stage('maven Build'){

               steps{
                   sh 'mvn clean install'
               }     
          }
          stage('Static Test Analysis in sonarqube'){

               steps{
                   script{
                    withSonarQubeEnv(credentialsId: 'new-auth') {
                      sh 'mvn clean package sonar:sonar'
                   }
               }     
           }
         }
         stage('Quality Gate Status'){

               steps{

                   script{

                    waitForQualityGate abortPipeline: false, credentialsId: 'new-auth'
                }
            }
         }
         stage('Upload war file to nexus'){

            steps{

                script{

                   def readPomVersion=readMavenPom file: 'pom.xml'
                   nexusArtifactUploader artifacts: 
                    [
                        [
                          artifactId: 'springboot', 
                          classifier: '', 
                          file: 'target/Uber.jar', 
                          type: 'jar'
                          ]
                     ], 
                    credentialsId: 'nexus-authentication', 
                    groupId: 'com.example', 
                    nexusUrl: '54.204.251.196:8081', 
                    nexusVersion: 'nexus3', 
                    protocol: 'http', 
                    repository: 'demoapp-release', 
                    version: "${readPomVersion.version}"
                }
            }
       }
       stage('Docker Image Build'){

         steps{

            script{
              sh 'docker image build -t $JOB_NAME:$BUILD_ID.'
              sh 'docker image tag $JOB_NAME:v1$BUILD_ID clemenrance/$job_NAME:V1.$BUILD_ID'
              sh 'docker image tag $JOB_NAME:v1.$BUILD_ID clemenrance/$JOB_NAME:latest'
            }
         }
       }
    }
}  
